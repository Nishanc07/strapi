name: Deploy to ECS with CodeDeploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Task definition download
        id: download-task-def
        env:
          ecs_task_def_name: nisha_task
        run: |
          aws ecs describe-task-definition --task-definition "$ecs_task_def_name" --query taskDefinition > task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-def-image
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: strapi
          image: ${{ steps.build.outputs.image }}

      - name: Set appspec.json values
        id: set-appspec-values
        env:
          container_port: 5000
          container_name: strapi
          cluster: nisha-cluster
          service: nisha-service
          codedeploy-application: nisha-codedeploy
          codedeploy-deployment-group: nisha-deployment-group
        run: |
          export TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition="$container_name" | jq '.taskDefinition.taskDefinitionArn')
            cat ./.github/workflows/appspec.json | jq --arg key "$TASK_DEF_ARN" '.Resources[].TargetService.Properties.TaskDefinition=$key' \
            | jq --arg key "$container_port" '.Resources[].TargetService.Properties.LoadBalancerInfo.ContainerPort=$key' \
            | jq --arg key "$container_name" '.Resources[].TargetService.Properties.LoadBalancerInfo.ContainerName=$key' > .aws/appspec.json
            sed -i 's#\\"##g' appspec.json

      - name: ECS task deployment using CodeDeploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        env:
          ACTIONS_STEP_DEBUG: true #enable step debug logging
        with:
          task-definition: task-definition.json
          service: nisha-service
          cluster: nisha_cluster
          wait-for-service-stability: true
          codedeploy-appspec: appspec.json
          codedeploy-application: nisha-codedeploy
          codedeploy-deployment-group: nisha-deployment-group
