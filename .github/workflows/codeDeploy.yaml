name: Code-Deploy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: nisha-ecr
  ECS_SERVICE: nisha-service
  ECS_CLUSTER: nisha-cluster
  TASK_FAMILY: nisha-task
  CONTAINER_NAME: strapi
  CODEDEPLOY_APP_NAME: nisha-app
  CODEDEPLOY_GROUP_NAME: nisha-deploy-group

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set image variables
        id: vars
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          IMAGE_TAG=gh-${GITHUB_SHA::7}
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          IMAGE_URI="$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image to Amazon ECR
        uses: docker/build-push-action@v5
        with:
          context: ./my-strapi-project
          file: ./my-strapi-project/Dockerfile
          push: true
          tags: ${{ env.IMAGE_URI }}

      - name: Get Current ECS Task Definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_FAMILY }} > task-def.json

      - name: Replace image in task definition
        id: task-def
        run: |
          NEW_TASK_DEF=$(jq --arg IMAGE "$IMAGE_URI" '.containerDefinitions[0].image = $IMAGE' task-def.json)
          echo "$NEW_TASK_DEF" > new-task-def.json

      - name: Register ECS Task Definition
        id: register-task-def
        uses: aws-actions/amazon-ecs-register-task-definition@v1
        with:
          family: nisha-task
          container-definitions: file://task-definition.json

      - name: Create appspec.json
        run: |
          echo "{
            \"version\": 1,
            \"Resources\": [
              {
                \"TargetService\": {
                  \"Type\": \"AWS::ECS::Service\",
                  \"Properties\": {
                    \"TaskDefinition\": \"${TASK_DEF_ARN}\",
                    \"LoadBalancerInfo\": {
                      \"ContainerName\": \"${{ env.CONTAINER_NAME }}\",
                      \"ContainerPort\": 1337
                    }
                  }
                }
              }
            ]
          }" > appspec.json

      - name: Deploy to ECS using CodeDeploy
        uses: aws-actions/aws-codedeploy-deploy-ecs@v1
        with:
          application-name: nisha-ecs-app
          deployment-group: nisha-deploy-group
          task-definition: ${{ steps.register-task-def.outputs.task-definition-arn }}
