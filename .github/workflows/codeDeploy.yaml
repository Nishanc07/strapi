name: Deploy to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: strapi
  ECS_SERVICE: nisha-service
  ECS_CLUSTER: nisha-cluster
  TASK_FAMILY: nisha-task
  CONTAINER_NAME: strapi
  CODEDEPLOY_APPLICATION: nisha-app
  CODEDEPLOY_DEPLOYMENT_GROUP: nisha-deploy-group

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and Push Pre-built Docker Image
        run: |
          IMAGE_TAG=gh-483de54
          # IMAGE_TAG=${{ github.sha }}
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"
          docker tag ${{ env.ECR_REPOSITORY }}:latest $IMAGE_URI
          docker push $IMAGE_URI
          echo $IMAGE_TAG > tag.txt
          echo $IMAGE_URI > image-uri.txt

      - name: Create taskdef.json
        run: |
          IMAGE_URI=$(cat image-uri.txt)
          cat > taskdef.json <<EOF
          {
            "family": "${{ env.TASK_FAMILY }}",
            "networkMode": "awsvpc",
            "executionRoleArn": "${{ secrets.ECS_EXECUTION_ROLE }}",
            "containerDefinitions": [
              {
                "name": "${{ env.CONTAINER_NAME }}",
                "image": "$IMAGE_URI",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 1337,
                    "protocol": "tcp"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/nisha-strapi",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "512",
            "memory": "1024"
          }
          EOF

      - name: Register Task Definition
        id: register-task-def
        uses: aws-actions/amazon-ecs-register-task-definition@v1.0.5
        with:
          task-definition: taskdef.json

      - name: Update appspec.yaml with Task Definition ARN
        run: |
          TASK_DEF_ARN="${{ steps.register-task-def.outputs.task-definition-arn }}"
          sed -i "s|<TASK_DEFINITION_PLACEHOLDER>|$TASK_DEF_ARN|g" appspec.yaml

      - name: Deploy using CodeDeploy
        uses: aws-actions/aws-codedeploy-deploy@v1
        with:
          application-name: ${{ env.CODEDEPLOY_APPLICATION }}
          deployment-group: ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }}
          revision-location: appspec.yaml
          deployment-description: "Deployed via GitHub Actions: ${{ github.sha }}"
