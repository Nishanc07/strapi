name: Deploy Strapi via ECS and CodeDeploy

on:
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  ECR_REPOSITORY: nisha-ecr
  ECS_CLUSTER: nisha-cluster
  ECS_SERVICE: nisha-service
  TASK_DEFINITION_NAME: nisha-task
  CODEDEPLOY_APP: nisha-codedeploy
  CODEDEPLOY_GROUP: nisha-deployment-group
  CONTAINER_NAME: strapi
  CONTAINER_PORT: "1337"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        id: docker
        uses: docker/build-push-action@v6
        with:
          context: ./my-strapi-project
          file: ./my-strapi-project/Dockerfile
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:gh-${{ github.sha }}

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ env.TASK_DEFINITION_NAME }} \
          --query 'taskDefinition | {family: family, networkMode: networkMode, containerDefinitions: containerDefinitions, requiresCompatibilities: requiresCompatibilities, cpu: cpu, memory: memory, executionRoleArn: executionRoleArn, taskRoleArn: taskRoleArn}' \
          > task-definition.json

      - name: Update image in task definition
        run: |
          IMAGE="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:gh-${{ github.sha }}"
          jq --arg IMAGE "$IMAGE" '.containerDefinitions[0].image = $IMAGE' task-definition.json > new-task-def.json

      - name: Register updated task definition
        id: register-task
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          echo "task-def-arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Generate appspec.json
        run: |
          cat > appspec.json <<EOF
          {
            "version": 1,
            "Resources": [
              {
                "TargetService": {
                  "Type": "AWS::ECS::Service",
                  "Properties": {
                    "TaskDefinition": "${{ steps.register-task.outputs.task-def-arn }}",
                    "LoadBalancerInfo": {
                      "ContainerName": "strapi",
                      "ContainerPort": "1337"
                    }
                  }
                }
              }
            ]
          }
          EOF

      - name: Trigger ECS deployment using CodeDeploy
        run: |
          BASE64_CONTENT=$(base64 appspec.json | tr -d '\n')
          aws deploy create-deployment \
            --application-name ${{ env.CODEDEPLOY_APP }} \
            --deployment-group-name ${{ env.CODEDEPLOY_GROUP }} \
            --revision revisionType=AppSpecContent,appSpecContent="{\"content\":\"$BASE64_CONTENT\"}" \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --description "Deploying commit ${{ github.sha }}"
