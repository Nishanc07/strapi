name: Deploy to ECS with CodeDeploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Task definition download
        id: download-task-def
        env:
          ecs_task_def_name: nisha-task
        run: |
          aws ecs describe-task-definition --task-definition "$ecs_task_def_name" --query taskDefinition > task-definition.json

      - name: Set image variables
        id: vars
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION=us-east-2
          REPO_NAME=nisha-ecr
          IMAGE_TAG=gh-${GITHUB_SHA::7}
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com"
          IMAGE_URI="$ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG"

          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image to ECR
        uses: docker/build-push-action@v6
        with:
          context: ./my-strapi-project
          file: ./my-strapi-project/Dockerfile
          push: true
          tags: ${{ env.IMAGE_URI }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-def-image
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: strapi
          image: ${{ env.IMAGE_URI }}

      - name: Create .aws directory
        run: mkdir -p .aws

      - name: Write appspec.json
        run: |
          cat > .aws/appspec.json <<EOL
          {
            "version": 1,
            "Resources": [
              {
                "TargetService": {
                  "Type": "AWS::ECS::Service",
                  "Properties": {
                    "TaskDefinition": "REPLACED_AT_RUNTIME",
                    "LoadBalancerInfo": {
                      "ContainerName": "strapi",
                      "ContainerPort": 1337
                    }
                  }
                }
              }
            ]
          }
          EOL

      - name: ECS task deployment using CodeDeploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def-image.outputs.task-definition }}
          service: nisha-service
          cluster: nisha-cluster
          wait-for-service-stability: true
          codedeploy-appspec: .aws/appspec.json
          codedeploy-application: nisha-codedeploy
          codedeploy-deployment-group: nisha-deployment-group
