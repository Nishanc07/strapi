name: CD - Deploy with Terraform and ECR

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: nisha-ecr
  ECS_CLUSTER: nisha-cluster
  ECS_SERVICE: nisha-service
  TASK_DEFINITION_TEMPLATE: taskdef.json
  TASK_DEFINITION_NAME: nisha-task
  CONTAINER_NAME: strapi
  DEPLOYMENT_GROUP: nisha-deploy-group
  APPLICATION_NAME: nisha-codedeploy

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::607700977843:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG 607700977843.dkr.ecr.${AWS_REGION}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          docker push 607700977843.dkr.ecr.${AWS_REGION}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}

      - name: Render ECS task definition
        id: render-taskdef
        run: |
          IMAGE_TAG=${{ github.sha }}
          sed "s|<IMAGE_PLACEHOLDER>|${IMAGE_TAG}|g" $TASK_DEFINITION_TEMPLATE > rendered-taskdef.json

      - name: Register new ECS task definition revision
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://rendered-taskdef.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Create CodeDeploy deployment
        run: |
          aws deploy create-deployment \
            --application-name $APPLICATION_NAME \
            --deployment-group-name $DEPLOYMENT_GROUP \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --file-exists-behavior OVERWRITE \
            --task-definition $TASK_DEF_ARN \
            --description "GitHub Actions deployment ${{ github.sha }}" \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
